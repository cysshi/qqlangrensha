import { Context, Schema } from 'koishi'

export const name = 'qqlangrensha'

export interface Config {}

export const Config: Schema<Config> = Schema.object({})

export function apply(ctx: Context) {
  //测试输出
  ctx.command('测试', '测试输出')
    .action(async ({ session }) => {
      console.log(session);
      return '测试完成'
})
/*qqbot狼人杀实现逻辑(4人局)
一. 所需数据表:
狼人杀玩家表： 玩家id(session.event.user.id) 加入的对局id 玩家序号 玩家昵称 游戏身份id 玩家状态(死亡/存活) 被投票数 被刀票数
狼人杀对局表： 对局id(唯一) 群id(session.event.guild.id) 对局状态(游戏中/准备中/已结束) 对局人数 对局创建者id  胜利方id(狼人/好人/空值)
二. 身份分配 
1狼人(身份id1) 2村民(身份id2) 1预言家(身份id3)
三. 游戏流程 
发送 /创建狼人杀游戏 [游戏昵称] 指令(在对局表中添加对局数据)->其他人发送 /加入狼人杀 [游戏昵称] 指令(玩家表中添加玩家数据更新加入的对局id字段，根据玩家id查询玩家表，若已存在该玩家id则提示你已经在游戏里了)
->玩家人数满足要求后(查询对局表对局人数字段)->创建游戏者可发送 /开始狼人杀游戏 指令->游戏开始->后台完成玩家身份的分配(将玩家的身份在玩家表中更新)
提示身份牌已发放，进入准备时间30s，在这期间玩家需在单聊中发送 /查看身份 指令(先判断玩家不是在群聊中发送指令(session.event.guild.id为undefined)才能执行，再查询玩家表中玩家id对应的身份id)查看具体身份，准备时间过后提示游戏进入黑夜，系统根据玩家身份发送提示信息，提示玩家可以进行的操作
夜晚行动顺序:
行动阶段1：狼人与预言家 (行动时间120s) 狼人可用 /刀人 [玩家序号|玩家昵称]指令 预言家可用 /验人 [玩家序号|玩家昵称]指令
行动阶段2：村民->提示你什么也做不了 (行动时间10s)
夜晚结算阶段1：根据对局id在玩家表中查询到对局对应的所有玩家，对每个玩家进行被刀票数的统计，将被刀票数最大的玩家状态设置为死亡(若被刀票数相同则随机选择一个死亡，0除外)
夜晚结算阶段2：根据对局id在玩家表中查询到对局对应的所有玩家，若没有狼人身份的玩家状态为存活则设置对局表胜利方id为好人。
进入白天，提示天亮了
对局结算查询阶段：查询对局表胜利方id，若胜利方id为不为空值则公布对应阵营id的阵营胜利，同时公布所有玩家的身份信息
若对局表胜利方id为空值则根据夜晚结算结果提示那个玩家死亡或平安夜
进入白天讨论阶段120s
进入白天投票阶段30s 提示使用 /投票 [玩家序号|玩家昵称] 指令进行投票(使用对局id与玩家序号或玩家昵称在玩家表中查询到对应玩家，更新其被投票数字段)
公布投票结果统计：根据对局id在玩家表中查询到对局对应的所有玩家，对每个玩家进行被投票数的统计，将被投票数最大的玩家状态设置为死亡，进入投票结算阶段(若被投票数相同则进入二次投票阶段)
二次投票阶段(30s)：提示进入二次投票阶段 可使用 /投票 [玩家序号|玩家昵称] 指令进行投票(使用对局id与玩家序号或玩家昵称在玩家表中查询到对应玩家，更新其被投票数字段)
投票结算阶段：根据对局id在玩家表中查询到对局对应的所有玩家，对每个玩家的玩家状态统计，若没有狼人身份的玩家状态为存活则设置对局表胜利方id为好人。
对局结算查询阶段：查询对局表胜利方id，若胜利方id为不为空值则公布对应阵营id的阵营胜利，同时公布所有玩家的身份信息，若胜利方id为空值再次进入黑夜（之后进入循环流程）。
*/ 

}
